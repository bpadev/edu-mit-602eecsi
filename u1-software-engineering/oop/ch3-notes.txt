Chapter 3: Programs and Data

The enormous richness and complexity of computer programs comes from the composition of primitive elements with simple rules.
An interpreter is made up of four pieces:
    The reader to tokenizer takes as input a string of characters and divides them into tokens, which are numbers (like -3.42), words like (while or a), and special characters (like :).
    The parser takes as input the string of tokens and understands them as constructs in the programming language, such as while loops, procedure definitions, or return statements.
    The evaluator (which is also sometimes called the interpreter) has the really interesting job of determining the value and effects of the program that you ask it to interpret.
    The printer takes the value returned by the evaluator and prints it out for the user to see.


3.1 Primitives, Composition, Abstraction, and Patterns
Data
    The primitive data items in most programming languages are things like integers, floating point numbers, and strings.
Procedures
    The primitive procedures of a language are things like built-in numeric operations and basic list operations.
Objects
    Object-oriented programming provide a number of methods of abstraction and pattern capture in both data and procedures.
    The features of inheritance and polymorphism are particularly important.

3.2 Expressions and assignment
We can think of most computer programs as performing some sort of transformation on data.
High-level programming languages such as Python let us abstract away lower level details.

3.2.1 Simple Expressions
Each expression has a value, which can be computed recursively by evaluating primitive expressions, and then using standard rules to combine their values to get new values.

3.2.2 Variables
A variable is a name that we can bind to have a particular value and then later use in an expression.
An interpreter keeps track of which variables are bound to what values in binding environments.

3.3 Structured data
We want to organize the data into natural structures: grocery lists, matrices, sets of employee medical records.

3.3.1 List mutation and shared structure
Lists are mutable data structures, which means that we can actually change the values stored in their elements.
Programs that change list structure can become very confusing, but you can always work your way through what is happening by drawing out the memory diagrams.
Aliasing is when you have two variables pointing to the same piece of data. (ex. a = [3, 4, 5], b = a)

3.3.2 Tuples and strings
A tuple is a structure that is like a list, but is not mutable.
    a = (1, 2, 3)
    a = 'abc' strings are tuples
Structured assignment (destructuring)
    a, b, c = 1, 2, 3

3.4 Procedures
Procedures are computer-program constructs that let us capture common patterns of computation by:
    Gathering together sequences of statements
    Abstracting away from particular data items on which they operate.

3.4.1 Defintion

3.4.2 Procedure calls

3.4.3 Non-local references

3.4.4 Environments in Python
__builtin__: the mother of all environments, it contains the definitions of all sorts of basic symbols.
Module: each separate file that contains Python code is called a module and establishes its own environment, whose parent is __builtin__
Procedure calls: if defined in the top level of a module (not nested in the definition of another procedure) it has the module's environment as its parent. Procedures defined inside other procedures have the procedure-call environment of the containing procedure as their parent.

3.4.5 Non-local references in procedures
Use global to reference a variable outside of the current environment. 

3.4.6 Procedures as first-class objects 
In Python procedures are treated in much the same way as numbers:
    They can be stored as variables.
    Can be passed as arguments to procedures.
    Can be returned as results of procedure calls. 
We can construct some procedures without naming them using lambda:
    f = lambda x: x*x
We can pass in procedures as arguments.